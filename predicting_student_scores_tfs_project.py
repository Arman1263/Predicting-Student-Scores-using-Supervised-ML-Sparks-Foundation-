# -*- coding: utf-8 -*-
"""Predicting_Student_Scores_TFS_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Hc31KaKVg8qO4o2wOlXUcF771m25nrY

Author : Arman Shikalgar

Task 1 : Prediction using Supervised Machine Learning  GRIP @The Sparks Foundation

# Prediction of marks of a student based on the number of hours he/she studied.

First step is to import the libraries that are required for the implementation of the code.

pandas, numpy, matplotlib
"""

import pandas as pd
import numpy as np
import matplotlib.pylab as plt

"""The next step is to load the data into the program to perform the operation"""

from google.colab import drive
drive.mount('/content/drive')

data_load = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/Data/new_std_data.xlsx')
print("Data imported successfully")

"""The next step is to view the data"""

data_load.head()

"""The next step is to enter the distribution scores and plot them accordingly to the requirement."""

data_load.plot(x='hours', y='scores')
plt.title('Hours Vs Percentage')
plt.xlabel('The Hours Studied')
plt.ylabel('The Percentage of Score')
plt.plot()

"""The process of dividing the data into attributes and labels in our next task, so on we implement the same below."""

x = data_load.iloc[:, :-1].values
y = data_load.iloc[:, 1].values

"""The split of data into the training and test sets is very important as in this time we will be using Scikit Learn's built in method of train_test_split()."""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

"""Next process is to train the algorithm"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)

"""Now next step is to implement the plotting test data using previouly trained test data"""

line = regressor.coef_*x+regressor.intercept_
plt.scatter(x, y)
plt.plot(x, line);
plt.show()

"""Predicting the scores for the model"""

print(x_test)
y_pred = regressor.predict(x_test)

"""Comparing the actual vs predicted model to understand our model fitting"""

df = pd.DataFrame({'Actual' : y_test, 'Predicted' : y_pred})
df

"""Final step is to test our model with the sample testing hours, so in case, we take 8.5 hours, i.e, if a student studies for seven hours, approximately how many makrks he/she can get based on the data we have received and model we applied."""

hrs = [[3.5]]
my_pred = regressor.predict(hrs)
print("Number of Hours = {}".format(hrs))
print("Predicted Score = {}".format(my_pred[0]))

"""Finally we have implemented the model.

**The important thing is that need to know that this model works only for the dataset we provided. The result may changed and thus we need to optimize the model again.**

Thank You!
"""